
1. # Define the provider (AWS)
provider "aws" {
  region = "us-east-1" # Update with your desired region
}

# Create a VPC
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16" # Update with your desired CIDR block
}

# Create a public subnet
resource "aws_subnet" "public_subnet" {
  vpc_id                  = aws_vpc.my_vpc.id
  cidr_block              = "10.0.1.0/24" # Update with your desired CIDR block
  availability_zone       = "us-east-1a"  # Update with your desired AZ
  map_public_ip_on_launch = true
}

# Create a private subnet
resource "aws_subnet" "private_subnet" {
  vpc_id                  = aws_vpc.my_vpc.id
  cidr_block              = "10.0.2.0/24" # Update with your desired CIDR block
  availability_zone       = "us-east-1b"  # Update with your desired AZ
}

# Create an EC2 instance in the public subnet
resource "aws_instance" "ec2_instance" {
  ami           = "ami-xxxxxxxxxxxxxxxxx" # Replace with your desired AMI ID
  instance_type = "t2.micro"
  subnet_id    = aws_subnet.public_subnet.id

  root_block_device {
    volume_type = "gp2"
    volume_size = 8
  }

  tags = {
    "Name"    = "EC2Instance"
    "purpose" = "Assignment"
  }
}

# Create a security group
resource "aws_security_group" "my_security_group" {
  name        = "my_security_group"
  description = "My Security Group"
  vpc_id      = aws_vpc.my_vpc.id
}

# Define inbound rule for SSH
resource "aws_security_group_rule" "ssh_inbound" {
  type        = "ingress"
  from_port   = 22
  to_port     = 22
  protocol    = "tcp"
  cidr_blocks = ["0.0.0.0/0"]
  security_group_id = aws_security_group.my_security_group.id
}

# Define outbound rule for all traffic
resource "aws_security_group_rule" "all_outbound" {
  type        = "egress"
  from_port   = 0
  to_port     = 0
  protocol    = "-1"
  cidr_blocks = ["0.0.0.0/0"]
  security_group_id = aws_security_group.my_security_group.id
}







2. import requests

# OpenWeatherMap API URL
API_URL = "https://samples.openweathermap.org/data/2.5/forecast/hourly?q=London,us&appid=b6907d289e10d714a6e88b30761fae22"

def display_menu():
    print("\nMenu:")
    print("1. Get Temperature")
    print("2. Get Wind Speed")
    print("3. Get Pressure")
    print("0. Exit")

def get_temperature(date_time):
    response = requests.get(API_URL)
    data = response.json()
    for forecast in data['list']:
        if forecast['dt_txt'] == date_time:
            temperature = forecast['main']['temp']
            print(f"Temperature at {date_time}: {temperature}Â°C")
            return
    print("Data not found for the given date and time.")

def get_wind_speed(date_time):
    response = requests.get(API_URL)
    data = response.json()
    for forecast in data['list']:
        if forecast['dt_txt'] == date_time:
            wind_speed = forecast['wind']['speed']
            print(f"Wind Speed at {date_time}: {wind_speed} m/s")
            return
    print("Data not found for the given date and time.")

def get_pressure(date_time):
    response = requests.get(API_URL)
    data = response.json()
    for forecast in data['list']:
        if forecast['dt_txt'] == date_time:
            pressure = forecast['main']['pressure']
            print(f"Pressure at {date_time}: {pressure} hPa")
            return
    print("Data not found for the given date and time.")

def main():
    while True:
        display_menu()
        choice = input("Enter your choice: ")

        if choice == '1':
            date_time = input("Enter date with time (yyyy-MM-dd HH:mm:ss): ")
            get_temperature(date_time)
        elif choice == '2':
            date_time = input("Enter date with time (yyyy-MM-dd HH:mm:ss): ")
            get_wind_speed(date_time)
        elif choice == '3':
            date_time = input("Enter date with time (yyyy-MM-dd HH:mm:ss): ")
            get_pressure(date_time)
        elif choice == '0':
            print("Exiting the program.")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()